// ==UserScript==
// @name         Auto Codesim
// @namespace    http://tampermonkey.net/
// @version      2.7.0
// @description  Lấy OTP codesim.net. Góc dưới phải, Glass UI Sáng, không hiển thị SĐT/OTP, Draggable.
// @author       Matthew M.
// @match        *://automusic.win/*
// @match        *://*.automusic.win/*
// @grant        GM_xmlhttpRequest
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_addStyle
// @grant        GM_setClipboard
// @connect      apisim.codesim.net
// @license      MIT
// ==/UserScript==

(function() {
    'use strict';
    const API_BASE_URL = "https://apisim.codesim.net"; const POLLING_INTERVAL_DEFAULT = 4500; const POLLING_INTERVAL_PENDING = 4100; const TARGET_SERVICES = ["YouTube", "Gmail"]; const DEFAULT_SERVICE_NAME = "YouTube"; const DEFAULT_NETWORK_NAME = "VIETTEL";
    const ACCOUNTS = { "bassteam": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJiYXNzdGVhbSIsImp0aSI6IjIyNzA2IiwiaWF0IjoxNzAwNzg0NzYxLCJleHAiOjE3NjI5OTI3NjF9.Y-EdhWVLhyo2A-KOfoNNDzUMt4Ht0yzSa9dtMkL1EJTlJ4BtAcjlYqD2BNIYpU95m5B7NFxJtDlHpHHAKpmGzw", "sang88": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzYW5nODgiLCJqdGkiOiIxMzM4MCIsImlhdCI6MTcwMDc4NDc4NiwiZXhwIjoxNzYyOTkyNzg2fQ.ucsVc3AGnV3OOIuZR10fciFD1vU4a32lXLLOXIV9nyxDvTJmqvzGbXNlx7UaHap2Zyw4j8838Fr1B_xytrE7Wg" };
    const LAST_SELECTED_ACCOUNT_KEY = 'codesim_last_selected_account_v3'; const MINIMIZED_STATE_KEY = 'codesim_minimized_state_v3';
    const DEFAULT_POSITION = { top: 'auto', bottom: '20px', left: 'auto', right: '20px' };
    const ICON_MINIMIZE = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line></svg>`;
    const ICON_MAXIMIZE = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"/></svg>`;
    let services = []; let filteredServices = []; let networks = []; let currentOtpId = null; let currentSimId = null; let currentPhoneNumber = null; let pollingTimeoutId = null; let accountBalances = {}; let selectedAccountName = null; let currentApiKey = null; let isMinimized = GM_getValue(MINIMIZED_STATE_KEY, false);
    function copyToClipboard(text, successMessagePrefix = "Đã copy:") { /* ... */ if (!text || typeof text !== 'string' || text.trim() === '' || text === 'N/A' || text === 'Đang chờ...' || text === 'Đang lấy số...') { console.log('[CodeSim] Invalid copy text:', text); return; } try { GM_setClipboard(text); showStatus(`${successMessagePrefix} ${text}`, false); console.log(`[CodeSim] Copied: ${text}`); } catch (err) { console.error('[CodeSim] Copy error:', err); showStatus('Lỗi sao chép!', true); } }
    function apiRequest(method, endpoint, params = {}, callback, onError, specificApiKey = null) { /* ... */ const keyToUse = specificApiKey || currentApiKey; if (!keyToUse) { const errorMsg = "Chưa chọn tài khoản!"; if (onError) onError(errorMsg); else showStatus(errorMsg, true); console.error("[CodeSim] API Error:", errorMsg); return; } params.api_key = keyToUse; const url = new URL(`${API_BASE_URL}${endpoint}`); Object.keys(params).forEach(key => { if (params[key] !== undefined && params[key] !== null && params[key] !== '') { url.searchParams.append(key, params[key]); } }); const accountLabel = selectedAccountName || 'Init'; console.log(`[CodeSim ${accountLabel}] Req: ${method} ${url.toString()}`); GM_xmlhttpRequest({ method: method.toUpperCase(), url: url.toString(), timeout: 15000, onload: function(response) { console.log(`[CodeSim ${accountLabel}] Res Status: ${response.status}`); try { const json = JSON.parse(response.responseText); if (json.status === 200) { if (callback) callback(json.data); } else { const errMsg = json.message || `Lỗi API (${json.status})`; console.error(`[CodeSim ${accountLabel}] API Error: ${errMsg}`, json); if (onError) onError(errMsg); else showStatus(`Lỗi API: ${errMsg}`, true); } } catch (e) { console.error(`[CodeSim ${accountLabel}] JSON Error:`, e); const errorMsg = "Lỗi xử lý API."; if (onError) onError(errorMsg); else showStatus(errorMsg, true); } }, onerror: function(response) { console.error(`[CodeSim ${accountLabel}] Network Error:`, response); const errorMsg = "Lỗi mạng API."; if (onError) onError(errorMsg); else showStatus(errorMsg, true); }, ontimeout: function() { console.error(`[CodeSim ${accountLabel}] Timeout`); const errorMsg = "API Timeout."; if (onError) onError(errorMsg); else showStatus(errorMsg, true); } }); }
    function showStatus(message, isError = false, isLoading = false) { /* ... */ const statusEl = document.getElementById('codesim-status'); if (statusEl) { if (isLoading && message === 'Đang chờ OTP...' && statusEl.classList.contains('success')) { /* Skip */ } else { statusEl.textContent = message; statusEl.className = 'status-message'; if (isError) statusEl.classList.add('error'); else if (isLoading) statusEl.classList.add('loading'); else statusEl.classList.add('success'); } if (!isLoading || message !== 'Đang chờ OTP...') { console.log(`[CodeSim Status] ${message}`); } } else { console.warn("[CodeSim] Status element missing."); } }
    function updateMainBalanceDisplay() { /* ... */ const balanceEl = document.getElementById('codesim-balance-main'); if (!balanceEl) return; if (selectedAccountName && accountBalances[selectedAccountName] !== undefined) { if (accountBalances[selectedAccountName] === null) { balanceEl.textContent = `Số dư (${selectedAccountName}): Lỗi`; balanceEl.style.color = 'var(--danger-color)'; } else { balanceEl.textContent = `Số dư (${selectedAccountName}): ${accountBalances[selectedAccountName].toLocaleString('vi-VN')}đ`; balanceEl.style.color = 'var(--success-color)'; } } else { balanceEl.textContent = 'Số dư: Chọn tài khoản...'; balanceEl.style.color = 'var(--text-color-dim)'; } }
    function toggleMinimize() { /* ... */ isMinimized = !isMinimized; const container = document.getElementById('codesim-container'); const minimizeBtn = document.getElementById('codesim-minimize-btn'); if (container && minimizeBtn) { container.classList.toggle('codesim-minimized', isMinimized); minimizeBtn.innerHTML = isMinimized ? ICON_MAXIMIZE : ICON_MINIMIZE; minimizeBtn.title = isMinimized ? 'Phóng to' : 'Thu nhỏ'; GM_setValue(MINIMIZED_STATE_KEY, isMinimized); } }
    function createUI() {
        console.log("[CodeSim] Creating UI (v2.7.0 - No Info Display)...");
        const container = document.createElement('div');
        container.id = 'codesim-container';
        if (isMinimized) { container.classList.add('codesim-minimized'); }
        container.style.top = DEFAULT_POSITION.top; container.style.bottom = DEFAULT_POSITION.bottom;
        container.style.left = DEFAULT_POSITION.left; container.style.right = DEFAULT_POSITION.right;
        try { if (!document.body) { console.error("[CodeSim] Body not ready!"); setTimeout(createUI, 100); return; } document.body.appendChild(container); console.log("[CodeSim] Container appended."); }
        catch (e) { console.error("[CodeSim] Failed to append container!", e); return; }
        const header = document.createElement('div'); header.id = 'codesim-header'; header.style.cursor = 'move'; const title = document.createElement('h3'); title.textContent = 'Auto Codesim'; header.appendChild(title); const controlsDiv = document.createElement('div'); controlsDiv.className = 'codesim-controls'; const minimizeButton = document.createElement('button'); minimizeButton.id = 'codesim-minimize-btn'; minimizeButton.className = 'control-button minimize svg-button'; minimizeButton.innerHTML = isMinimized ? ICON_MAXIMIZE : ICON_MINIMIZE; minimizeButton.title = isMinimized ? 'Phóng to' : 'Thu nhỏ'; minimizeButton.onclick = toggleMinimize; controlsDiv.appendChild(minimizeButton); const closeButton = document.createElement('button'); closeButton.id = 'codesim-close-btn'; closeButton.className = 'control-button close'; closeButton.innerHTML = '×'; closeButton.title = 'Đóng'; closeButton.onclick = (e) => { e.stopPropagation(); container.style.display = 'none'; }; controlsDiv.appendChild(closeButton); header.appendChild(controlsDiv); container.appendChild(header);
        const contentWrapper = document.createElement('div'); contentWrapper.className = 'codesim-content'; container.appendChild(contentWrapper);
        try {
            const accountGroup=document.createElement('div');accountGroup.className='form-group';const accountLabel=document.createElement('label');accountLabel.textContent='Tài khoản:';accountLabel.htmlFor='codesim-account-select';const accountSelect=document.createElement('select');accountSelect.id='codesim-account-select';accountSelect.innerHTML='<option value="">-- Đang tải TK --</option>';accountSelect.onchange=handleAccountChange;accountGroup.appendChild(accountLabel);accountGroup.appendChild(accountSelect);contentWrapper.appendChild(accountGroup);
            const balanceDisplay=document.createElement('div');balanceDisplay.id='codesim-balance-main';contentWrapper.appendChild(balanceDisplay);
            const serviceGroup=document.createElement('div');serviceGroup.className='form-group';const serviceLabel=document.createElement('label');serviceLabel.textContent='Dịch vụ:';serviceLabel.htmlFor='codesim-service-select';const serviceSelect=document.createElement('select');serviceSelect.id='codesim-service-select';serviceSelect.innerHTML='<option value="">-- Chọn dịch vụ --</option>';serviceSelect.onchange=checkAndEnableOtpButton;serviceGroup.appendChild(serviceLabel);serviceGroup.appendChild(serviceSelect);contentWrapper.appendChild(serviceGroup);
            const networkGroup=document.createElement('div');networkGroup.className='form-group';const networkLabel=document.createElement('label');networkLabel.textContent='Nhà mạng:';networkLabel.htmlFor='codesim-network-select';const networkSelect=document.createElement('select');networkSelect.id='codesim-network-select';networkSelect.innerHTML='<option value="">-- Mặc định --</option>';networkGroup.appendChild(networkLabel);networkGroup.appendChild(networkSelect);contentWrapper.appendChild(networkGroup);
            const prefixGroup=document.createElement('div');prefixGroup.className='form-group';const phonePrefixLabel=document.createElement('label');phonePrefixLabel.textContent='Đầu số (Tùy chọn):';phonePrefixLabel.htmlFor='codesim-phone-prefix';const phonePrefixInput=document.createElement('input');phonePrefixInput.type='text';phonePrefixInput.id='codesim-phone-prefix';phonePrefixInput.placeholder='VD: 098,034,...';prefixGroup.appendChild(phonePrefixLabel);prefixGroup.appendChild(phonePrefixInput);contentWrapper.appendChild(prefixGroup);
            const buttonGroup=document.createElement('div');buttonGroup.className='button-group';const getOtpButton=document.createElement('button');getOtpButton.id='codesim-get-otp';getOtpButton.className='button primary';getOtpButton.textContent='Lấy số mới';getOtpButton.onclick=handleGetOtpClick;getOtpButton.disabled=true;buttonGroup.appendChild(getOtpButton);const cancelButton=document.createElement('button');cancelButton.id='codesim-cancel';cancelButton.className='button danger';cancelButton.textContent='Hủy Yêu Cầu';cancelButton.style.display='none';cancelButton.onclick=handleCancelClick;buttonGroup.appendChild(cancelButton);contentWrapper.appendChild(buttonGroup);

            const statusDisplay=document.createElement('div');statusDisplay.id='codesim-status';statusDisplay.className='status-message';contentWrapper.appendChild(statusDisplay);
        } catch (uiError) { console.error("[CodeSim] Error creating inner UI!", uiError); showStatus("Lỗi tạo giao diện!", true); return; }

        addStyles();
        makeDraggable(container, header);
        console.log("[CodeSim] Fetching initial account data...");
        fetchInitialAccountData();
    }
    function addStyles() {
        GM_addStyle(`
            /* Light Mode Variables */
            :root {
                --bg-color: rgba(248, 249, 250, 0.5); --input-bg: rgba(255, 255, 255, 0.6); --button-bg: rgba(222, 226, 230, 0.5); --button-hover-bg: rgba(206, 212, 218, 0.6); --button-active-bg: rgba(173, 181, 189, 0.7); --button-primary-bg: rgba(51, 154, 240, 0.5); --button-primary-hover-bg: rgba(36, 139, 230, 0.6); --button-danger-bg: rgba(250, 119, 119, 0.5); --button-danger-hover-bg: rgba(239, 93, 93, 0.6); --success-bg: rgba(81, 207, 102, 0.3); --error-bg: rgba(255, 135, 135, 0.3); --loading-bg: rgba(233, 236, 239, 0.4); --info-bg: rgba(241, 243, 245, 0.4);
                --blur-intensity: 10px; --border-color: rgba(0, 0, 0, 0.1); --text-color: #212529; --text-color-dim: #6c757d; --text-color-strong: #000000; --title-color: #0d6efd; --primary-color: #0d6efd; --danger-color: #dc3545; --success-color: #198754; --input-border: rgba(0, 0, 0, 0.15); --input-focus-border: var(--primary-color); --shadow-color: rgba(0, 0, 0, 0.15); --border-radius: 8px;
            }
            #codesim-container {
                position: fixed; width: 300px;
                background-color: var(--bg-color); border: 1px solid var(--border-color); border-radius: var(--border-radius); z-index: 99999; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 14px; box-shadow: 0 8px 32px 0 var(--shadow-color); color: var(--text-color); overflow: hidden; backdrop-filter: blur(var(--blur-intensity)); -webkit-backdrop-filter: blur(var(--blur-intensity)); transition: height 0.3s ease, opacity 0.3s ease, background-color 0.3s ease; height: auto; opacity: 1;
            }
            #codesim-container.codesim-minimized { height: 50px; opacity: 0.9; background-color: color-mix(in srgb, var(--bg-color) 80%, white 10%); }
            #codesim-container.codesim-minimized .codesim-content { display: none; }
            #codesim-header { display: flex; justify-content: space-between; align-items: center; padding: 10px 15px; border-bottom: 1px solid var(--border-color); background-color: color-mix(in srgb, var(--bg-color) 50%, white 5%); height: 50px; box-sizing: border-box; }
            #codesim-header h3 { margin: 0; font-size: 16px; color: var(--title-color); font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; flex-grow: 1; padding-right: 10px; }
            .codesim-controls { display: flex; align-items: center; flex-shrink: 0; gap: 8px; }
            .control-button { background: none; border: none; color: var(--text-color-dim); cursor: pointer; font-size: 22px; padding: 0 5px; line-height: 1; transition: color 0.2s ease, transform 0.2s ease; display: inline-flex; align-items: center; justify-content: center; margin-left: 0; }
            .control-button.svg-button { font-size: inherit; padding: 3px; }
            .control-button svg { width: 1em; height: 1em; vertical-align: middle; }
            .control-button:hover { color: var(--text-color-strong); transform: scale(1.1); }
            .control-button.close:hover { color: var(--danger-color); }
            .control-button.minimize:hover { color: var(--primary-color); }
            .codesim-content { padding: 15px; }
            .form-group { margin-bottom: 15px; }
            #codesim-container label { display: block; margin-bottom: 6px; font-weight: 500; color: var(--text-color-dim); font-size: 13px; }
            #codesim-container select, #codesim-container input[type="text"] { width: 100%; padding: 10px 12px; border: 1px solid var(--input-border); border-radius: 6px; font-size: 14px; box-sizing: border-box; background-color: var(--input-bg); color: var(--text-color); transition: border-color 0.2s ease, box-shadow 0.2s ease, background-color 0.3s ease; appearance: none; -webkit-appearance: none; -moz-appearance: none; }
            #codesim-container select { background-image: url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="${encodeURIComponent('#6c757d')}" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/></svg>'); background-repeat: no-repeat; background-position: right 10px center; background-size: 16px 12px; padding-right: 30px; }
            #codesim-container select:focus, #codesim-container input[type="text"]:focus { border-color: var(--input-focus-border); outline: none; box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary-color) 30%, transparent); background-color: color-mix(in srgb, var(--input-bg) 90%, white 5%); }
            .button-group { display: flex; gap: 10px; margin-top: 18px; margin-bottom: 10px; }
            #codesim-container button.button { flex-grow: 1; border: none; padding: 10px 15px; text-align: center; text-decoration: none; font-size: 14px; border-radius: 6px; cursor: pointer; transition: background-color 0.2s ease, transform 0.1s ease, box-shadow 0.2s ease; font-weight: 600; color: var(--text-color-strong); background-color: var(--button-bg); box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            #codesim-container button.button:hover:not(:disabled) { box-shadow: 0 4px 8px rgba(0,0,0,0.15); transform: translateY(-1px); } #codesim-container button.button:active:not(:disabled) { transform: translateY(0px); box-shadow: 0 1px 2px rgba(0,0,0,0.1); } #codesim-container button.primary { background-color: var(--button-primary-bg); color: #fff; } #codesim-container button.primary:hover:not(:disabled) { background-color: var(--button-primary-hover-bg); } #codesim-container button.primary:active:not(:disabled) { background-color: color-mix(in srgb, var(--button-primary-bg) 80%, black 5%); } #codesim-container button.danger { background-color: var(--button-danger-bg); color: #fff; } #codesim-container button.danger:hover:not(:disabled) { background-color: var(--button-danger-hover-bg); } #codesim-container button.danger:active:not(:disabled) { background-color: color-mix(in srgb, var(--button-danger-bg) 80%, black 5%); } #codesim-container button.button:disabled { background-color: rgba(200, 200, 200, 0.4); color: var(--text-color-dim); cursor: not-allowed; box-shadow: none; transform: none; }

            /* --- Info Display CSS REMOVED --- */
            /* #codesim-info { ... } */
            /* #codesim-info p { ... } */
            /* #codesim-info p strong { ... } */
            /* #codesim-info p span.info-value { ... } */
            /* --- End Removal --- */

            .status-message { margin-top: 15px; font-weight: 500; padding: 10px 12px; border-radius: 6px; text-align: center; min-height: 1.5em; color: var(--text-color); border: 1px solid var(--border-color); font-size: 13px; transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease; background-color: var(--info-bg); } .status-message.success { background-color: var(--success-bg); color: var(--success-color); border-color: color-mix(in srgb, var(--success-color) 40%, transparent); } .status-message.error { background-color: var(--error-bg); color: var(--danger-color); border-color: color-mix(in srgb, var(--danger-color) 40%, transparent); } .status-message.loading { background-color: var(--loading-bg); color: var(--text-color-dim); border-color: color-mix(in srgb, var(--text-color-dim) 40%, transparent); }
            #codesim-balance-main { text-align: right; font-size: 13px; color: var(--text-color-dim); margin-bottom: 12px; margin-top: -8px; font-weight: 500; height: 1.2em; }
        `);
    }

    function makeDraggable(elmnt, dragHandle) { /* ... same as v2.6.1 ... */ let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; const dragMouseDown = (e) => { if (e.target.closest('button, select, input')) { return; } e = e || window.event; e.preventDefault(); pos3 = e.clientX; pos4 = e.clientY; document.onmouseup = closeDragElement; document.onmousemove = elementDrag; }; const elementDrag = (e) => { e = e || window.event; e.preventDefault(); pos1 = pos3 - e.clientX; pos2 = pos4 - e.clientY; pos3 = e.clientX; pos4 = e.clientY; let newTop = elmnt.offsetTop - pos2; let newLeft = elmnt.offsetLeft - pos1; const buffer = 10; newTop = Math.max(buffer, Math.min(newTop, window.innerHeight - elmnt.offsetHeight - buffer)); newLeft = Math.max(buffer, Math.min(newLeft, window.innerWidth - elmnt.offsetWidth - buffer)); elmnt.style.top = newTop + "px"; elmnt.style.left = newLeft + "px"; elmnt.style.bottom = "auto"; elmnt.style.right = "auto"; }; const closeDragElement = () => { document.onmouseup = null; document.onmousemove = null; }; if (dragHandle) { dragHandle.onmousedown = dragMouseDown; } else { elmnt.onmousedown = dragMouseDown; } }

    function fetchInitialAccountData() { /* ... */ showStatus("Đang tải thông tin tài khoản...", false, true); const accountNames = Object.keys(ACCOUNTS); accountBalances = {}; const balancePromises = accountNames.map(name => { return new Promise((resolve) => { const apiKey = ACCOUNTS[name]; apiRequest('GET', '/yourself/information-by-api-key', {}, (data) => resolve({ name: name, balance: data.balance }), (errorMsg) => { console.error(`[CodeSim] Lỗi balance ${name}: ${errorMsg}`); resolve({ name: name, balance: null, error: errorMsg }); }, apiKey ); }); }); Promise.allSettled(balancePromises).then(results => { console.log("[CodeSim] Balance results:", results); let highestBalance = -Infinity; let defaultAccount = GM_getValue(LAST_SELECTED_ACCOUNT_KEY, null); let foundDefaultFromStorage = false; let bestFallbackAccount = null; const accountSelect = document.getElementById('codesim-account-select'); if (!accountSelect) { console.error("[CodeSim] Account select not found!"); showStatus("Lỗi UI.", true); return; } accountSelect.innerHTML = ''; results.forEach(result => { if (result.status === 'fulfilled') { const { name, balance, error } = result.value; accountBalances[name] = balance; const option = document.createElement('option'); option.value = name; let displayText = name; if (balance !== null) { displayText += ` (${balance.toLocaleString('vi-VN')}đ)`; if (name === defaultAccount) foundDefaultFromStorage = true; if (balance > highestBalance) { highestBalance = balance; bestFallbackAccount = name; } } else { displayText += ` (Lỗi: ${error || 'N/A'})`; if (name === defaultAccount) { defaultAccount = null; foundDefaultFromStorage = false; } } option.textContent = displayText; accountSelect.appendChild(option); } else { console.error("[CodeSim] Promise rejected:", result.reason); } }); if (!foundDefaultFromStorage) defaultAccount = bestFallbackAccount; if (!defaultAccount && accountNames.length > 0) { const firstAccountName = accountNames[0]; if (accountBalances[firstAccountName] !== null) { defaultAccount = firstAccountName; } else { for (const name of accountNames) { if(accountBalances[name] !== null) { defaultAccount = name; break; } } } } if (defaultAccount) { console.log(`[CodeSim] Default account: ${defaultAccount}`); accountSelect.value = defaultAccount; try { handleAccountChangeLogic(defaultAccount); } catch(e) { console.error("[CodeSim] Error initial handleAccountChangeLogic:", e); showStatus("Lỗi khởi tạo tài khoản.", true); } } else { showStatus("Không tải được tài khoản!", true); updateMainBalanceDisplay(); checkAndEnableOtpButton(); } }).catch(error => { console.error("[CodeSim] Promise processing error:", error); showStatus("Lỗi tải dữ liệu tài khoản!", true); }); }
    function handleAccountChange() { /* ... */ const accountSelect = document.getElementById('codesim-account-select'); if (!accountSelect) return; const newAccountName = accountSelect.value; console.log(`[CodeSim] Account changed to: ${newAccountName}`); try { handleAccountChangeLogic(newAccountName); } catch (e) { console.error("[CodeSim] Error handleAccountChange:", e); showStatus("Lỗi chuyển tài khoản.", true); } }
    function handleAccountChangeLogic(newAccountName) { /* ... */ if (!newAccountName || !ACCOUNTS[newAccountName]) { console.warn(`[CodeSim] Invalid account: ${newAccountName}`); selectedAccountName = null; currentApiKey = null; updateMainBalanceDisplay(); resetOtpState(true); showStatus("Tài khoản không hợp lệ.", true); checkAndEnableOtpButton(); return; } if (currentOtpId) { console.log("[CodeSim] Cancelling active OTP on account change."); clearTimeout(pollingTimeoutId); resetOtpState(true); } selectedAccountName = newAccountName; currentApiKey = ACCOUNTS[selectedAccountName]; GM_setValue(LAST_SELECTED_ACCOUNT_KEY, selectedAccountName); console.log(`[CodeSim] State updated for account: ${selectedAccountName}`); showStatus(`Đã chọn tài khoản: ${selectedAccountName}.`, false); updateMainBalanceDisplay(); resetOtpState(false); fetchServicesAndNetworks(); }
    function fetchServicesAndNetworks() { /* ... */ if (!selectedAccountName || !currentApiKey) { console.warn("[CodeSim] fetchServicesAndNetworks no account."); showStatus("Chọn tài khoản hợp lệ.", true); checkAndEnableOtpButton(); return; } showStatus(`Đang tải DV/NM cho ${selectedAccountName}...`, false, true); const getOtpButton = document.getElementById('codesim-get-otp'); if(getOtpButton) getOtpButton.disabled = true; const serviceSelect = document.getElementById('codesim-service-select'); const networkSelect = document.getElementById('codesim-network-select'); if (!serviceSelect || !networkSelect) { console.error("[CodeSim] Select elements not found!"); showStatus("Lỗi UI.", true); return; } filteredServices = []; networks = []; serviceSelect.innerHTML = '<option value="">-- Đang tải DV --</option>'; networkSelect.innerHTML = '<option value="">-- Đang tải NM --</option>'; const servicePromise = new Promise((resolve, reject) => { apiRequest('GET', '/service/get_service_by_api_key', {}, (data) => { try { services = data; filteredServices = services.filter(service => TARGET_SERVICES.includes(service.name) && (service.status === undefined || service.status === 1)); serviceSelect.innerHTML = ''; if (filteredServices.length === 0) { serviceSelect.innerHTML = '<option value="">-- Không có DV phù hợp --</option>'; reject(`Không tìm thấy dịch vụ (${TARGET_SERVICES.join('/')}) nào.`); return; } let defaultServiceSelected = false; filteredServices.sort((a, b) => a.name.localeCompare(b.name)); filteredServices.forEach(service => { const option = document.createElement('option'); option.value = service.id; option.textContent = `${service.name} (${service.price.toLocaleString('vi-VN')}đ)`; serviceSelect.appendChild(option); if (service.name === DEFAULT_SERVICE_NAME) { option.selected = true; defaultServiceSelected = true; } }); if (!defaultServiceSelected && serviceSelect.options.length > 0) { serviceSelect.options[0].selected = true; } resolve(); } catch (e) { console.error("[CodeSim] Error processing services:", e); reject("Lỗi xử lý dịch vụ."); } }, (errorMsg) => { serviceSelect.innerHTML = '<option value="">-- Lỗi tải DV --</option>'; reject(`Lỗi tải dịch vụ: ${errorMsg}`); } ); }); const networkPromise = new Promise((resolve) => { apiRequest('GET', '/network/get-network-by-api-key', {}, (data) => { try { networks = data; networkSelect.innerHTML = '<option value="">-- Mặc định (Tất cả) --</option>'; let defaultNetworkSelected = false; networks.forEach(network => { if (network.status === 1) { const option = document.createElement('option'); option.value = network.id; option.textContent = network.name; networkSelect.appendChild(option); if (network.name === DEFAULT_NETWORK_NAME) { option.selected = true; defaultNetworkSelected = true; } } }); resolve(); } catch (e) { console.error("[CodeSim] Error processing networks:", e); networkSelect.innerHTML = '<option value="">-- Lỗi xử lý NM --</option>'; resolve(); } }, (errorMsg) => { networkSelect.innerHTML = '<option value="">-- Lỗi tải NM --</option>'; console.warn(`[CodeSim] Lỗi tải nhà mạng: ${errorMsg}.`); resolve(); } ); }); Promise.all([servicePromise, networkPromise]).then(() => { showStatus(`Sẵn sàng cho tài khoản ${selectedAccountName}.`, false); checkAndEnableOtpButton(); }).catch(error => { showStatus(error, true); checkAndEnableOtpButton(); }); }
    function handleGetOtpClick() {
        const serviceSelect = document.getElementById('codesim-service-select'); const networkSelect = document.getElementById('codesim-network-select'); const phonePrefixInput = document.getElementById('codesim-phone-prefix'); const getOtpButton = document.getElementById('codesim-get-otp'); const cancelButton = document.getElementById('codesim-cancel');
        if (!serviceSelect || !networkSelect || !phonePrefixInput || !getOtpButton || !cancelButton) { console.error("[CodeSim] UI element missing!"); showStatus("Lỗi UI!", true); return; } const serviceId = serviceSelect.value; const networkId = networkSelect.value; const prefix = phonePrefixInput.value.trim(); if (!serviceId) { showStatus("Vui lòng chọn dịch vụ.", true); return; } getOtpButton.disabled = true; cancelButton.style.display = 'inline-block';
        showStatus("Đang gửi yêu cầu lấy số...", false, true); const params = { service_id: serviceId, network_id: networkId || undefined, phone: prefix || undefined };
        apiRequest('GET', '/sim/get_sim', params, (data) => {
            currentOtpId = data.otpId; currentSimId = data.simId; currentPhoneNumber = data.phone; console.log(`[CodeSim] Số đã nhận: ${currentPhoneNumber}`);
            showStatus('Đã nhận số. Đang chờ mã OTP...', false, true);
            copyToClipboard(currentPhoneNumber, "Đã tự động copy SĐT:"); clearTimeout(pollingTimeoutId); pollingTimeoutId = setTimeout(checkOtpStatus, POLLING_INTERVAL_PENDING); fetchBalanceForCurrentAccount();
        }, (errorMsg) => { if (errorMsg.includes("hủy phiên")) { showStatus(`Lỗi lấy số: ${errorMsg}. Hãy thử hủy trên web Codesim.`, true); } else { showStatus(`Lỗi lấy số: ${errorMsg}`, true); } resetOtpState(false); } );
    }
    function checkOtpStatus() {
        if (!currentOtpId) { console.warn("[CodeSim] checkOtpStatus no OtpId."); return; }
        const params = { otp_id: currentOtpId }; apiRequest('GET', '/otp/get_otp_by_phone_api_key', params, (data) => {
            const otpCode = data.code; const content = data.content; console.log(`[CodeSim] OTP Check: Code=${otpCode}, Content=${content}`);
            if (otpCode && otpCode.trim() !== "" && otpCode !== "null") {
                showStatus(`Đã nhận OTP!`, false); console.log(`[CodeSim] OTP Received: ${otpCode}. SMS: ${content}`);
                copyToClipboard(otpCode, "Đã tự động copy OTP:"); clearTimeout(pollingTimeoutId); pollingTimeoutId = null; const cancelButton = document.getElementById('codesim-cancel'); if(cancelButton) cancelButton.style.display = 'none'; const getOtpButton = document.getElementById('codesim-get-otp'); if(getOtpButton) getOtpButton.disabled = false;
            } else {
                clearTimeout(pollingTimeoutId); pollingTimeoutId = setTimeout(checkOtpStatus, POLLING_INTERVAL_PENDING);
            } }, (errorMsg) => { console.error(`[CodeSim] Lỗi kiểm tra OTP: ${errorMsg}.`); if (errorMsg.includes("Hết hạn") || errorMsg.includes("hủy") || errorMsg.includes("timeout")) { showStatus(`Lỗi OTP: ${errorMsg}. Yêu cầu kết thúc.`, true); resetOtpState(false); } else { showStatus('Đang chờ mã OTP', false); clearTimeout(pollingTimeoutId); pollingTimeoutId = setTimeout(checkOtpStatus, POLLING_INTERVAL_PENDING); } } );
    }
    function handleCancelClick() { /* ... */ if (!currentOtpId || !currentSimId) { showStatus("Không có yêu cầu để hủy.", true); return; } console.log(`[CodeSim] Cancelling SIM ID: ${currentSimId}`); showStatus("Đang hủy yêu cầu...", false, true); const cancelButton = document.getElementById('codesim-cancel'); if(cancelButton) cancelButton.disabled = true; const endpoint = `/sim/cancel_api_key/${currentSimId}`; const params = {}; apiRequest('GET', endpoint, params, (data) => { showStatus("Yêu cầu hủy đã gửi.", false); clearTimeout(pollingTimeoutId); resetOtpState(false); fetchBalanceForCurrentAccount(); }, (errorMsg) => { showStatus(`Lỗi hủy: ${errorMsg}`, true); if(cancelButton) cancelButton.disabled = false; } ); }
    function resetOtpState(resetAccountRelatedUI = false) {
        console.log(`[CodeSim] Reset OTP state. Reset Acc UI: ${resetAccountRelatedUI}`); clearTimeout(pollingTimeoutId); pollingTimeoutId = null; currentOtpId = null; currentSimId = null; currentPhoneNumber = null; const getOtpButton = document.getElementById('codesim-get-otp'); const cancelButton = document.getElementById('codesim-cancel');
        const phonePrefixInput = document.getElementById('codesim-phone-prefix'); const serviceSelect = document.getElementById('codesim-service-select'); const networkSelect = document.getElementById('codesim-network-select'); const statusDisplay = document.getElementById('codesim-status'); if (getOtpButton) getOtpButton.disabled = false; if (cancelButton) { cancelButton.style.display = 'none'; cancelButton.disabled = false; }
        if (phonePrefixInput) phonePrefixInput.value = ''; if (statusDisplay && !statusDisplay.classList.contains('error')) { /* Optionally clear */ } if (resetAccountRelatedUI) { if (serviceSelect) serviceSelect.innerHTML = '<option value="">-- Chọn tài khoản --</option>'; if (networkSelect) networkSelect.innerHTML = '<option value="">-- Chọn tài khoản --</option>'; if (getOtpButton) getOtpButton.disabled = true; } else { checkAndEnableOtpButton(); }
    }
    function checkAndEnableOtpButton() { /* ... */ const getOtpButton = document.getElementById('codesim-get-otp'); const serviceSelect = document.getElementById('codesim-service-select'); if (getOtpButton && serviceSelect) { const isAccountSelected = !!selectedAccountName; const isServiceSelected = !!serviceSelect.value; const isOtpActive = !!currentOtpId; getOtpButton.disabled = !(isAccountSelected && isServiceSelected && !isOtpActive); } else if (getOtpButton) { getOtpButton.disabled = true; } }
    function fetchBalanceForCurrentAccount() { /* ... */ if (!selectedAccountName || !currentApiKey) { return; } console.log(`[CodeSim] Refreshing balance: ${selectedAccountName}`); apiRequest('GET', '/yourself/information-by-api-key', {}, (data) => { accountBalances[selectedAccountName] = data.balance; updateMainBalanceDisplay(); updateAccountDropdownBalance(selectedAccountName, data.balance); }, (errorMsg) => { console.error(`[CodeSim] Lỗi refresh balance: ${errorMsg}`); accountBalances[selectedAccountName] = null; updateMainBalanceDisplay(); updateAccountDropdownBalance(selectedAccountName, null, errorMsg); } ); }
    function updateAccountDropdownBalance(accountName, balance, error = null) { /* ... */ const accountSelect = document.getElementById('codesim-account-select'); if (!accountSelect) return; const option = accountSelect.querySelector(`option[value="${accountName}"]`); if (option) { let displayText = accountName; if (balance !== null) { displayText += ` (${balance.toLocaleString('vi-VN')}đ)`; } else { displayText += ` (Lỗi: ${error || 'N/A'})`; } option.textContent = displayText; } }

    function initializeScript() { /* ... */ if (document.body) { console.log("[CodeSim] Body ready, creating UI."); createUI(); } else { console.log("[CodeSim] Body not ready, waiting DOMContentLoaded."); window.addEventListener('DOMContentLoaded', createUI); } }
    initializeScript();

})();
